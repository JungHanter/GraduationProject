package madi;

import java.util.ArrayList;

import processing.core.PApplet;
import ddf.minim.AudioPlayer;
import ddf.minim.Minim;

class AudioManager extends Thread {
	private Madi parent;
	private Minim minim;

	private AudioPlayer[][] players = new AudioPlayer[Global.NUMBER_OF_SOURCE][Global.NUMBER_OF_NODETYPE];

	private int[][] volumes = new int[Global.NUMBER_OF_SOURCE][Global.NUMBER_OF_NODETYPE];

	private boolean[][] bOnStatus = new boolean[Global.NUMBER_OF_SOURCE][Global.NUMBER_OF_NODETYPE];
	private boolean[][] bOnFlag = new boolean[Global.NUMBER_OF_SOURCE][Global.NUMBER_OF_NODETYPE];
	
	private int startMillis = 0;
	private int sec = 0;
	
	//request play
	public void requestPlaySound(int sourceNum, int nodeNum) {
		bOnFlag[sourceNum][nodeNum] = true;
	}
	public void requestStopSound(int sourceNum, int nodeNum) {
		bOnFlag[sourceNum][nodeNum] = false;
	}
	
	public void run() {
		startMillis = parent.millis();
		sec = 0;
		
		while(true) {
			int millis = parent.millis();
				
			if(startMillis + 1000 <= millis) {
				startMillis+=1000;
				sec++;
				if(sec==4) {
					sec=0;
					
					synchronized (bOnFlag) {
					synchronized (bOnStatus) {
						for(int src=0; src<Global.NUMBER_OF_SOURCE; src++) {
							for(int node=0; node<Global.NUMBER_OF_NODETYPE; node++) {
								AudioPlayer player = players[src][node];
								if(bOnFlag[src][node]) {
									if(!bOnStatus[src][node]) {
										bOnStatus[src][node] = true;
										player.cue(0);
										player.loop(10000000);
									}
								} else {
									if(bOnStatus[src][node]) {
										bOnStatus[src][node] = false;
										player.pause();
									}
								}
							}
						}
					}}

				}
			}
			
			try { Thread.sleep(1); }
			catch(Exception e) {;}
		}
	}

	public void init(Minim minim) {
		this.minim = minim;
		parent = Madi.nowApplet();

		for (int src = 0; src < Global.NUMBER_OF_SOURCE; src++) {
			for (int node = 0; node < Global.NUMBER_OF_NODETYPE; node++) {
				players[src][node] = minim.loadFile(Global.DIR_SOUND + src + node + ".wav");
			}
		}

	}

	public AudioManager() {
		for (int src = 0; src < Global.NUMBER_OF_SOURCE; src++) {
			for (int node = 0; node < Global.NUMBER_OF_NODETYPE; node++) {
				volumes[src][node] = 0;
				bOnStatus[src][node] = false;
				bOnFlag[src][node] = false;
			}
		}

	}

	public void setVolume(int src, int node, int volume) {
		volumes[src][node] = volume;
	}

	public int getVolume(int src, int node) {
		return volumes[src][node];
	}

	
	private static AudioManager mAudioManager = null;
	public static AudioManager getAudioManager() {
		if (mAudioManager == null) {
			mAudioManager = new AudioManager();
		}
		return mAudioManager;
	}
}