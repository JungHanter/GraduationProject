package madi;

import processing.core.PApplet;
import java.util.*;
import ddf.minim.*;
import controlP5.*;
import codeanticode.syphon.*;

public class Madi extends PApplet {
	private static final long serialVersionUID = 6591583294519173637L;

	PGraphics canvas;
	SyphonServer server;

	Minim minim;

	Random random;
	ArrayList<Node> nodeList = null;
	ArrayList<Source> sourceList = null;

	color[] NODE_COLORS = new color[] { 0xFFFF69B4, 0xFF9932CC, 0xFF6495ED,
			0xFF20B2AA, 0xFFF0E68C, 0xFFEFA500 };

	color[] SOURCE_COLORS = new color[] { 0xFF20B2AA, 0xFFB0C4DE, 0xFFDB7093,
			0xFFF4A460 };

	long frames;

	void setup() {
		size(Global.CANVAS_SIZE + Global.CANVAS_MARGIN_LEFT,
				Global.CANVAS_SIZE, P3D);
		canvas = createGraphics(Global.CANVAS_SIZE, Global.CANVAS_SIZE, P3D);

		server = new SyphonServer(this, "Madi");

		canvas.noStroke();
		canvas.smooth();
		frameRate(30);
		canvas.ellipseMode(CENTER);

		minim = new Minim(this);
		getAudioManager().init(minim);

		frames = 0l;
		random = new Random();
		nodeList = new ArrayList<Node>(Global.NUMBER_OF_NODE);
		sourceList = new ArrayList<Source>(Global.NUMBER_OF_SOURCE);

		for (int i = 0; i < Global.NUMBER_OF_NODE; i++) {
			nodeList.add(new Node(random, i % Global.NUMBER_OF_NODETYPE,
					NODE_COLORS[i % Global.NUMBER_OF_NODETYPE]));
		}
		for (int i = 0; i < Global.NUMBER_OF_SOURCE; i++) {
			Source src = new Source(random, i, SOURCE_COLORS[i]);
			src.connect(nodeList);
			sourceList.add(src);
		}

		initControls();
	}

	void draw() {
		canvas.beginDraw();

		canvas.background(0);

		for (Node node : nodeList) {
			node.move();
		}
		for (Source src : sourceList) {
			src.move();
			src.run(frames);
		}

		for (Source src : sourceList) {
			src.draw();
		}
		for (Node node : nodeList) {
			node.draw();
		}

		frames++;

		canvas.endDraw();

		noStroke();
		fill(127);
		rect(800, 0, 400, 800);

		image(canvas, 0, 0);
		server.sendImage(canvas);

		loadPixels();
	}

	float dist(NodeBase a, NodeBase b) {
		return dist(a.getX(), a.getY(), b.getX(), b.getY());
	}

}
