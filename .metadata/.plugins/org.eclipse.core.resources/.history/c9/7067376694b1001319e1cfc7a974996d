package madi;

import java.util.ArrayList;
import java.util.Random;

import processing.data.*;
import processing.core.PApplet;
import processing.core.PGraphics;
import codeanticode.syphon.SyphonServer;
import controlP5.ControlEvent;
import controlP5.ControlP5;
import controlP5.RadioButton;
import controlP5.Slider;
import controlP5.Toggle;
import ddf.minim.Minim;

public class Madi extends PApplet {
	private static final long serialVersionUID = 6591583294519173637L;

	private static Madi nowApplet;
	public static PApplet nowApplet() {
		return nowApplet;
	}

	PGraphics canvas;
	SyphonServer server;

	Minim minim;

	Random random;
	ArrayList<Node> nodeList = null;
	ArrayList<Source> sourceList = null;

	int[] NODE_COLORS = new int[] { 0xFFFF69B4, 0xFF9932CC, 0xFF6495ED,
			0xFF20B2AA, 0xFFF0E68C, 0xFFEFA500 };

	int[] SOURCE_COLORS = new int[] { 0xFF20B2AA, 0xFFB0C4DE, 0xFFDB7093,
			0xFFF4A460 };

	long frames;

	public void setup() {
		nowApplet = this;
		size(Global.CANVAS_SIZE + Global.CANVAS_MARGIN_LEFT,
				Global.CANVAS_SIZE, P3D);
		canvas = createGraphics(Global.CANVAS_SIZE, Global.CANVAS_SIZE, P3D);

		server = new SyphonServer(this, "Madi");

		canvas.noStroke();
		canvas.smooth();
		frameRate(30);
		canvas.ellipseMode(CENTER);

		minim = new Minim(this);
		AudioManager.getAudioManager().init(minim);

		frames = 0l;
		random = new Random();
		nodeList = new ArrayList<Node>(Global.NUMBER_OF_NODE);
		sourceList = new ArrayList<Source>(Global.NUMBER_OF_SOURCE);

		for (int i = 0; i < Global.NUMBER_OF_NODE; i++) {
			nodeList.add(new Node(random, i % Global.NUMBER_OF_NODETYPE,
					NODE_COLORS[i % Global.NUMBER_OF_NODETYPE]));
		}
		for (int i = 0; i < Global.NUMBER_OF_SOURCE; i++) {
			Source src = new Source(random, i, SOURCE_COLORS[i]);
			src.connect(nodeList);
			sourceList.add(src);
		}

		initControls();
	}

	public void draw() {
		canvas.beginDraw();

		canvas.background(0);

		for (Node node : nodeList) {
			node.move();
		}
		for (Source src : sourceList) {
			src.move();
			src.run(frames);
		}

		for (Source src : sourceList) {
			src.draw(canvas);
		}
		for (Node node : nodeList) {
			node.draw();
		}

		frames++;

		canvas.endDraw();

		noStroke();
		fill(127);
		rect(800, 0, 400, 800);

		image(canvas, 0, 0);
		server.sendImage(canvas);

		loadPixels();
	}

	float dist(NodeBase a, NodeBase b) {
		return dist(a.getX(), a.getY(), b.getX(), b.getY());
	}



	/*** controls ***/
	ControlP5 cp5;

	RadioButton rb;
	Slider soundAllSlider;
	Slider[] soundSlider = new Slider[6];

	int selectSourceNum = 0;
	int nodeSoundAll = 0;
	int nodeSound0 = 0;
	int nodeSound1 = 0;
	int nodeSound2 = 0;
	int nodeSound3 = 0;
	int nodeSound4 = 0;
	int nodeSound5 = 0;

	void initControls() {
		cp5 = new ControlP5(this);
		rb = cp5.addRadioButton("radioButton")
				.setPosition(Global.CANVAS_SIZE+20, 20)
				.setSize(40,20)
				.setColorLabel(color(255))
				.setItemsPerRow(4)
				.setSpacingColumn(50);
		for(int i=0; i<Global.NUMBER_OF_SOURCE; i++) {
			rb.addItem("Source "+i, i);
		}
		rb.activate(0);

		for(Toggle t:rb.getItems()) {
			t.captionLabel().setColorBackground(color(255,80));
			t.captionLabel().style().moveMargin(-7,0,0,-3);
			t.captionLabel().style().movePadding(7,0,0,3);
			t.captionLabel().style().backgroundWidth = 45;
			t.captionLabel().style().backgroundHeight = 13;
		}

		soundAllSlider = cp5.addSlider("nodeSoundAll")
				.setPosition(Global.CANVAS_SIZE+20, 60)
				.setSize(300,20)
				.setRange(-100,300)
				.setValue(0);
		for(int i=0; i<Global.NUMBER_OF_NODETYPE; i++) {
			soundSlider[i] = cp5.addSlider("nodeSound"+i)
					.setPosition(Global.CANVAS_SIZE+20, 100 + i*30)
					.setSize(300,20)
					.setRange(-100,300)
					.setValue(0);
		}



		cp5.addButton("reset")
		.setPosition(Global.CANVAS_SIZE+20,Global.CANVAS_SIZE-60)
		.setSize(360,40)
		;
	}

	void radioButton(int num) {
		selectSourceNum = num;
		println("select Source "+num);
	}

	void reset() {
		setup();
	}

	boolean noAllChange = false;
	void controlEvent(ControlEvent theEvent) {
		if(theEvent.isFrom(rb)) {
			//print("got an event from "+theEvent.getName()+"\t");
			for(int i=0;i<theEvent.getGroup().getArrayValue().length;i++) {
				//print(int(theEvent.getGroup().getArrayValue()[i]));
			}
			//println("\t "+theEvent.getValue());
			selectSourceNum = (int)theEvent.group().value();
			println("select Source num="+selectSourceNum);

			AudioManager am = AudioManager.getAudioManager();
			noAllChange = true;
			soundAllSlider.setValue(0);
			for(int i=0; i<Global.NUMBER_OF_NODETYPE; i++) {
				soundSlider[i].setValue(am.getVolume(selectSourceNum, i));
			}

		} else if(theEvent.isFrom(soundAllSlider)) {
			if(noAllChange) {
				noAllChange = false;
				return;
			}

			AudioManager am = AudioManager.getAudioManager();
			int volume = (int)soundAllSlider.getValue();

			for(int i=0; i<Global.NUMBER_OF_NODETYPE; i++) {
				soundSlider[i].setValue(volume);
				am.setVolume(selectSourceNum, i, volume);
			}

		} else {
			for(int i=0; i<Global.NUMBER_OF_NODETYPE; i++) {
				if(theEvent.isFrom(soundSlider[i])) {
					AudioManager am = AudioManager.getAudioManager();
					am.setVolume(selectSourceNum, i, (int)soundSlider[i].getValue());
					break;
				}
			}
		}
	}

}
